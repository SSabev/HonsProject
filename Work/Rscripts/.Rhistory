decomposed <- decompose(x=sochi_ts,type='additive')
plot(decomposed)
#acf(sochi_smoothed, lag.max=20)
#pacf(sochi_smoothed, lag.max=20)
# sochi_arima <- arima(x=sochi_smoothed, order=c(5,1,0))
sochi_arima <- auto.arima(sochi_ts[1:400])
sochi_forecasts <- forecast.Arima(sochi_arima, h=30)
plot.forecast(sochi_forecasts)
predicted_vals <- sochi_forecasts$mean
actual_vals <- sochi_ts[400:431]
# ar_model <- ar(sochi_ts[1:400])
# ar_model$order <- 28
# for (i in 1:28){
#   ar_model$ar[i:i]<-0
# }
# ar_model$ar[7:7] <- 0.675
# ar_model$ar[14:14] <- 0.225
# ar_model$ar[21:21] <- 0.075
# ar_model$ar[28:28] <- 0.025
#
# ar_forecast <- forecast.ar(ar_model, h=30)
# plot.forecast(ar_forecast)
#plot(fitted(sochi_arima))
#plot(fitted(ar_model))
df <- data.frame(Predicted=NA, Actual=NA)
for(i in 30:430){
sochi_arima <- auto.arima(sochi_ts[1:i])
sochi_forecasts <- forecast.Arima(sochi_arima, h=1)
predicted_vals <- sochi_forecasts$mean
actual_vals <- sochi_ts[i:i+1]
# writeLines(paste(predicted_vals, ' ', actual_vals))
df <- rbind(df, c(predicted_vals, actual_vals))
}
df <- df[complete.cases(df), ]
writeLines(paste("MAPE is: ",mean(abs((df$Actual - df$Predicted)/df$Actual))))
writeLines(paste("RMSE is: ", rmse(df$Actual, df$Predicted, na.rm=TRUE)))
df_l4f <- data.frame(Predicted=NA, Actual=NA)
for(i in 30:430){
c1 <- i-7
c2 <- i-14
c3 <- i-21
c4 <- i-28
l4f_value <- 0.675*sochi_ts[c1:c1] + 0.225*sochi_ts[c2:c2] + 0.075*sochi_ts[c3:c3] + 0.025*sochi_ts[c4:c4]
actual_vals <- sochi_ts[i:i+1]
# writeLines(paste(predicted_vals, ' ', actual_vals))
df <- rbind(df, c(l4f_value, actual_vals))
}
df_l4f <- df_l4f[complete.cases(df_l4f), ]
writeLines(paste("MAPE is: ",mean(abs((df_l4f$Actual - df_l4f$Predicted)/df_l4f$Actual))))
writeLines(paste("RMSE is: ", rmse(df_l4f$Actual, df_l4f$Predicted, na.rm=TRUE)))
library(forecast)
library(zoo)
library("TTR")
library(ggplot2)
require('hydroGOF')
setwd('Dev/HonsProject/Work/Rscripts')
data <- read.zoo(file='Sochi.csv', sep = ",", header = TRUE,
index = 1:1, tz = "", format = "%Y-%m-%d")
# rdaead.csv('../tidydata/joined/Sochi.csv')
#data <- data[complete.cases(data), ]
sochi_ts <- ts(data$Searches, frequency=7)
plot.ts(sochi_ts)
# sochi_smoothed <- ts(SMA(sochi_ts, n=6), frequency=7)[6:430]
# plot.ts(sochi_smoothed)
decomposed <- decompose(x=sochi_ts,type='additive')
plot(decomposed)
#acf(sochi_smoothed, lag.max=20)
#pacf(sochi_smoothed, lag.max=20)
# sochi_arima <- arima(x=sochi_smoothed, order=c(5,1,0))
sochi_arima <- auto.arima(sochi_ts[1:400])
sochi_forecasts <- forecast.Arima(sochi_arima, h=30)
plot.forecast(sochi_forecasts)
predicted_vals <- sochi_forecasts$mean
actual_vals <- sochi_ts[400:431]
# ar_model <- ar(sochi_ts[1:400])
# ar_model$order <- 28
# for (i in 1:28){
#   ar_model$ar[i:i]<-0
# }
# ar_model$ar[7:7] <- 0.675
# ar_model$ar[14:14] <- 0.225
# ar_model$ar[21:21] <- 0.075
# ar_model$ar[28:28] <- 0.025
#
# ar_forecast <- forecast.ar(ar_model, h=30)
# plot.forecast(ar_forecast)
#plot(fitted(sochi_arima))
#plot(fitted(ar_model))
df <- data.frame(Predicted=NA, Actual=NA)
for(i in 30:430){
sochi_arima <- auto.arima(sochi_ts[1:i])
sochi_forecasts <- forecast.Arima(sochi_arima, h=1)
predicted_vals <- sochi_forecasts$mean
actual_vals <- sochi_ts[i:i+1]
# writeLines(paste(predicted_vals, ' ', actual_vals))
df <- rbind(df, c(predicted_vals, actual_vals))
}
df <- df[complete.cases(df), ]
writeLines(paste("MAPE is: ",mean(abs((df$Actual - df$Predicted)/df$Actual))))
writeLines(paste("RMSE is: ", rmse(df$Actual, df$Predicted, na.rm=TRUE)))
df_l4f <- data.frame(Predicted=NA, Actual=NA)
for(i in 30:430){
c1 <- i-7
c2 <- i-14
c3 <- i-21
c4 <- i-28
l4f_value <- 0.675*sochi_ts[c1:c1] + 0.225*sochi_ts[c2:c2] + 0.075*sochi_ts[c3:c3] + 0.025*sochi_ts[c4:c4]
actual_vals <- sochi_ts[i:i+1]
# writeLines(paste(predicted_vals, ' ', actual_vals))
df_l4f <- rbind(df_l4f, c(l4f_value, actual_vals))
}
df_l4f <- df_l4f[complete.cases(df_l4f), ]
writeLines(paste("MAPE is: ",mean(abs((df_l4f$Actual - df_l4f$Predicted)/df_l4f$Actual))))
writeLines(paste("RMSE is: ", rmse(df_l4f$Actual, df_l4f$Predicted, na.rm=TRUE)))
df
df_l4f
df$Difference <- df$Predicted-df$Actual
df_l4f$Difference <- df_l4f$Predicted-df_l4f$Actual
View(df_l4f)
df_l4f$Difference <- abs(df_l4f$Predicted-df_l4f$Actual)
df$Difference <- df(df$Predicted-df$Actual)
df$Difference <- abs(df$Predicted-df$Actual)
View(df)
View(df_l4f)
library("changepoint")
set.seed(10)
m.data <- c(rnorm(100, 0, 1), rnorm(100, 1, 1), rnorm(100, 0, 1),
+ rnorm(100, 0.2, 1))
ts.plot(m.data, xlab = "Index")
install.packages('changepoint')
library("changepoint")
set.seed(10)
m.data <- c(rnorm(100, 0, 1), rnorm(100, 1, 1), rnorm(100, 0, 1),
+ rnorm(100, 0.2, 1))
ts.plot(m.data, xlab = "Index")
m.pelt <- cpt.mean(m.data, method = "PELT")
plot(m.pelt, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(m.pelt)
ncpts(m.plt)
ncpts(m.pelt)
ts.plot(sochi_ts, xlab="index")
sochi_cpts <- cpt.mean(sochi_ts, method='PELT')
sochi_cpts <- cpt.mean(sochi_ts, method='PELT')
sochi_ts
sochi_cpts <- cpt.mean(sochi_ts[1:430], method='PELT')
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4) cpts(sochi_cpts)
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(sochi_cpts)
sochi_cpts <- cpt.var(sochi_ts[1:430], method='PELT')
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
ncpts(sochi_cpts)
sochi_cpts <- cpt.var(sochi_ts[1:430])
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
sochi_cpts <- cpt.mean(sochi_ts[1:430])
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
sochi_cpts <- cpt.mean(sochi_ts[1:430],method = "SegNeigh")
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
history
history()
ts.plot(sochi_ts, xlab="index")
sochi_cpts <- cpt.mean(sochi_ts[1:430], method='PELT')
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(sochi_cpts)
ts.plot(sochi_ts, xlab="index")
sochi_cpts <- cpt.mean(sochi_ts[1:430], method='PELT',Q = 5)
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(sochi_cpts)
ts.plot(sochi_ts, xlab="index")
sochi_cpts <- cpt.mean(sochi_ts[1:430], Q = 5)
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(sochi_cpts)
ts.plot(sochi_ts, xlab="index")
sochi_cpts <- cpt.mean(sochi_ts[1:430], method='AMOC')
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(sochi_cpts)
ts.plot(sochi_ts, xlab="index")
sochi_cpts <- cpt.mean(sochi_ts[1:430], method='PELT')
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(sochi_cpts)
sochi_cpts <- cpt.var(sochi_ts[1:430])
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
sochi_cpts <- cpt.mean(sochi_ts[1:430])
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
sochi_cpts <- cpt.mean(sochi_ts[1:430],method = "SegNeigh")
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Poisson", method='SegNeigh')
plot(dis.pelt, cpt.width = 3)
cpts.ts(dis.pelt)
plot(sochi_meanvar, cpt.width = 3)
cpts.ts(sochi_meanvar)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Poisson", method='SegNeigh', penalty = 'AIC' )
plot(sochi_meanvar, cpt.width = 3)
cpts.ts(sochi_meanvar)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Poisson", method='SegNeigh', penalty = 'BIC' )
plot(sochi_meanvar, cpt.width = 3)
cpts.ts(sochi_meanvar)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Poisson", method='SegNeigh', penalty = 'Hannah-Quinn' )
plot(sochi_meanvar, cpt.width = 3)
cpts.ts(sochi_meanvar)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Poisson", method='SegNeigh')
plot(sochi_meanvar, cpt.width = 3)
cpts.ts(sochi_meanvar)
plot(sochi_meanvar, cpt.width = 3)
lines(fitted(sochi_arima))
lines(fitted(sochi_arima), colour ='blue')
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Poisson", method='SegNeigh')
plot(sochi_meanvar, cpt.width = 3)
lines(fitted(sochi_arima), col ='blue')
sochi_arima
last_one <- 0
plot(sochi_ts)
for(i in cpts.ts(sochi_mean_var)){
arma <- auto.arima(sochi_ts[last_one:i])
lines(fitted(arma), col='blue')
last_one <- i
}
last_one <- 0
plot(sochi_ts)
for(i in cpts.ts(sochi_meanvar)){
arma <- auto.arima(sochi_ts[last_one:i])
lines(fitted(arma), col='blue')
last_one <- i
}
last_one <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- auto.arima(sochi_ts[last_one:i])
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
sochi_ts
sochi_ts[2:427]
library(forecast)
library(zoo)
library("TTR")
library(ggplot2)
require('hydroGOF')
setwd('Dev/HonsProject/Work/Rscripts')
data <- read.zoo(file='Sochi.csv', sep = ",", header = TRUE,
index = 1:1, tz = "", format = "%Y-%m-%d")
# rdaead.csv('../tidydata/joined/Sochi.csv')
#data <- data[complete.cases(data), ]
sochi_ts <- ts(data$Searches, frequency=7)
plot.ts(sochi_ts)
# sochi_smoothed <- ts(SMA(sochi_ts, n=6), frequency=7)[6:430]
# plot.ts(sochi_smoothed)
decomposed <- decompose(x=sochi_ts,type='additive')
plot(decomposed)
#acf(sochi_smoothed, lag.max=20)
#pacf(sochi_smoothed, lag.max=20)
# sochi_arima <- arima(x=sochi_smoothed, order=c(5,1,0))
sochi_arima <- auto.arima(sochi_ts[1:400])
sochi_forecasts <- forecast.Arima(sochi_arima, h=30)
plot.forecast(sochi_forecasts)
predicted_vals <- sochi_forecasts$mean
actual_vals <- sochi_ts[400:431]
# ar_model <- ar(sochi_ts[1:400])
# ar_model$order <- 28
# for (i in 1:28){
#   ar_model$ar[i:i]<-0
# }
# ar_model$ar[7:7] <- 0.675
# ar_model$ar[14:14] <- 0.225
# ar_model$ar[21:21] <- 0.075
# ar_model$ar[28:28] <- 0.025
#
# ar_forecast <- forecast.ar(ar_model, h=30)
# plot.forecast(ar_forecast)
#plot(fitted(sochi_arima))
#plot(fitted(ar_model))
df <- data.frame(Predicted=NA, Actual=NA)
for(i in 30:430){
sochi_arima <- auto.arima(sochi_ts[1:i])
sochi_forecasts <- forecast.Arima(sochi_arima, h=1)
predicted_vals <- sochi_forecasts$mean
actual_vals <- sochi_ts[i:i+1]
# writeLines(paste(predicted_vals, ' ', actual_vals))
df <- rbind(df, c(predicted_vals, actual_vals))
}
df <- df[complete.cases(df), ]
writeLines(paste("MAPE is: ",mean(abs((df$Actual - df$Predicted)/df$Actual))))
writeLines(paste("RMSE is: ", rmse(df$Actual, df$Predicted, na.rm=TRUE)))
df_l4f <- data.frame(Predicted=NA, Actual=NA)
for(i in 30:430){
c1 <- i-7
c2 <- i-14
c3 <- i-21
c4 <- i-28
l4f_value <- 0.675*sochi_ts[c1:c1] + 0.225*sochi_ts[c2:c2] + 0.075*sochi_ts[c3:c3] + 0.025*sochi_ts[c4:c4]
actual_vals <- sochi_ts[i:i+1]
# writeLines(paste(predicted_vals, ' ', actual_vals))
df_l4f <- rbind(df_l4f, c(l4f_value, actual_vals))
}
df_l4f <- df_l4f[complete.cases(df_l4f), ]
writeLines(paste("MAPE is: ",mean(abs((df_l4f$Actual - df_l4f$Predicted)/df_l4f$Actual))))
writeLines(paste("RMSE is: ", rmse(df_l4f$Actual, df_l4f$Predicted, na.rm=TRUE)))
library("changepoint")
set.seed(10)
m.data <- c(rnorm(100, 0, 1), rnorm(100, 1, 1), rnorm(100, 0, 1),
+ rnorm(100, 0.2, 1))
ts.plot(m.data, xlab = "Index")
m.pelt <- cpt.mean(m.data, method = "PELT")
plot(m.pelt, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(m.pelt)
ts.plot(sochi_ts, xlab="index")
sochi_cpts <- cpt.mean(sochi_ts[1:430], method='PELT')
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpts(sochi_cpts)
sochi_cpts <- cpt.var(sochi_ts[1:430])
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
sochi_cpts <- cpt.mean(sochi_ts[1:430])
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
sochi_cpts <- cpt.mean(sochi_ts[1:430],method = "SegNeigh")
plot(sochi_cpts, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Poisson", method='SegNeigh')
plot(sochi_meanvar, cpt.width = 3)
lines(fitted(sochi_arima), col ='blue')
cpts.ts(sochi_meanvar)
last_one <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- auto.arima(sochi_ts[last_one-:i])
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
last_one <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- auto.arima(sochi_ts[last_one:i])
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Normal", method='SegNeigh')
plot(sochi_meanvar, cpt.width = 3)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Poisson", method='SegNeigh')
plot(sochi_meanvar, cpt.width = 3)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Normal", method='SegNeigh')
plot(sochi_meanvar, cpt.width = 3)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Gamma", method='SegNeigh')
plot(sochi_meanvar, cpt.width = 3)
sochi_meanvar <- cpt.meanvar(sochi_ts[1:430], test.stat = "Exponential", method='SegNeigh')
plot(sochi_meanvar, cpt.width = 3)
hist(sochi_ts)
duration <- rpois(500, 10) # For duration data I assume Poisson distributed
hist(duration,
probability = TRUE, # In stead of frequency
breaks = "FD",      # For more breaks than the default
col = "darkslategray4", border = "seashell3")
lines(density(duration - 0.5),   # Add the kernel density estimate (-.5 fix for the bins)
col = "firebrick2", lwd = 3
lines(density(duration - 0.5),   # Add the kernel density estimate (-.5 fix for the bins)
col = "firebrick2", lwd = 3
lines(density(duration - 0.5), col = "firebrick2", lwd = 3)
density(x=sochi_ts)
density(x=sochi_ts[1:430])
hist(sochi_ts, probability = TRUE, breaks = 'FD', col = "darkslategray4", border = "seashell3")
lines(density(sochi_ts[1:430], col='firebrick2'), lwd=3)
lines(density(sochi_ts[1:430]), col='firebrick2', lwd=3)
duration <- rpois(500, 10) # For duration data I assume Poisson distributed
hist(duration,
probability = TRUE, # In stead of frequency
breaks = "FD",      # For more breaks than the default
col = "darkslategray4", border = "seashell3")
lines(density(duration - 0.5), col = "firebrick2", lwd = 3)
hist(sochi_ts, probability = TRUE, col = "darkslategray4", border = "seashell3")
lines(density(sochi_ts[1:430]), col='firebrick2', lwd=3)
hist(sochi_ts, probability = TRUE, breaks = 'FD', col = "darkslategray4", border = "seashell3")
lines(density(sochi_ts[1:430]), col='firebrick2', lwd=3)
?lines
?density
hist(sochi_ts, probability = TRUE, breaks = 'FD', col = "darkslategray4", border = "seashell3")
lines(density(sochi_ts[1:430], bw=3), col='firebrick2', lwd = 3)
hist(sochi_ts, probability = TRUE, breaks = 'FD', col = "darkslategray4", border = "seashell3")
lines(density(sochi_ts[1:430], bw=1), col='firebrick2', lwd = 3)
?densit
?density
hist(sochi_ts, probability = TRUE, breaks = 'FD', col = "darkslategray4", border = "seashell3")
lines(density(sochi_ts[1:430], bw=0.0001), col='firebrick2', lwd = 3)
hist(sochi_ts, probability = TRUE, breaks = 'FD', col = "darkslategray4", border = "seashell3")
lines(density(sochi_ts[1:430]), col='firebrick2', lwd = 3)
sochi_ar
sochi_arima
sochi_ar
logLik(sochi_ar)
logl <- function(sigma,alpha,beta) {
-sum(dnorm(data[-1],alpha+beta*data[1:length(data)-1],sigma,log=TRUE))
}
sochi_ar$aic
sochi_ar$n.used
sochi_ar$partialacf
last_one <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- auto.arima(sochi_ts[last_one:i])
arma
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
last_one <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- auto.arima(sochi_ts[last_one:i])
writeLines(arma$loglik)
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
sochi_arima <- auto.arima(sochi_ts[1:400])
writeLines(paste("Big ARIMA Order: ", arma$coef))
writeLines(paste("Big LogLike is": arma$loglik))
sochi_arima <- auto.arima(sochi_ts[1:400])
writeLines(paste("Big ARIMA Order: ", sochi_arima$coef))
sochi-arima
sochi_arima
sochi_arima$model
sochi_arima$model$phi
sochi_arima$model$theta
sochi_arima$mask
sochi_arima$model
sochi_arima$x
sochi_arima$var.coef
sochi_arima$arma
plot(forecast(sochi_arima, h=30))
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,7))
plot(forecast(sochi_arima, h=30))
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,6))
plot(forecast(sochi_arima, h=30))
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,6))
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,6))
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,5))
plot(forecast(sochi_arima, h=30))
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,4))
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,5))
writeLines(paste("Big ARIMA Order: ", sochi_arima$coef))
writeLines(paste("Big LogLike is": sochi_arima$loglik))
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,5))
writeLines(paste("Big LogLike is": sochi_arima$loglik))
sochi_arima
sochi_arima$loglik
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,5))
writeLines(paste("Big LogLike is": sochi_arima$loglik))
for(i in cpts.ts(sochi_meanvar)){
arma <- arima(sochi_ts[last_one:i]), order=c(4,1,5))
writeLines(paste("LogLike is: ", arma$loglik))
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
last_one <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- arima(sochi_ts[last_one:i]), order=c(4,1,5))
writeLines(paste("LogLike is: ", arma$loglik))
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
last_one <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- arima(sochi_ts[last_one:i]), order=c(4,1,5))
writeLines(paste("LogLike is: ", arma$loglik))
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
last_one <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- arima(sochi_ts[last_one:i], order=c(4,1,5))
writeLines(paste("LogLike is: ", arma$loglik))
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
cpts.ts(sochi_meanvar)
last_one <- 0
loglik <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- arima(sochi_ts[last_one:i], order=c(4,1,5))
loglik <- loglik + arma$loglik
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
loglik
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,5), method='ML')
writeLines(paste("Big LogLike is": sochi_arima$loglik))
last_one <- 0
sochi_arima
last_one <- 0
loglik <- 0
for(i in cpts.ts(sochi_meanvar)){
arma <- arima(sochi_ts[last_one:i], order=c(4,1,5), method='ML')
loglik <- loglik + arma$loglik
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
loglik
sochi_arima <- arima(x = sochi_ts[1:400], order=c(4,1,5), method='ML')
writeLines(paste("Big LogLike is": sochi_arima$loglik))
last_one <- 0
loglik <- 0
for(i in cpts.ts(sochi_meanvar)){
writeLines(paste('at ', i))
arma <- arima(sochi_ts[last_one:i], order=c(4,1,5), method='ML')
loglik <- loglik + arma$loglik
plot(fitted(arma), col='blue')
lines(sochi_ts[last_one:i])
last_one <- i
}
cpts.ts(sochi_meanvar)
hist(sochi_ts, probability = TRUE, breaks = 'FD', col = "darkslategray4", border = "seashell3")
lines(density(sochi_ts[1:430]), col='firebrick2', lwd = 3)
source('~/Dev/HonsProject/Work/Rscripts/forecast.R')
