#geom_smooth(method=lm) +
#geom_line(aes(x=nx, y = ny), colour = '#00BFFF', size=0.5) +
#stat_smooth(method='lm') +
scale_color_manual(values=c("#4B0082", "#FF6347")) + #, '#9ACD32', '#EE82EE')) +
#xlab("Root mean squared error from the Twitter regression") +
#ylab("Root mean squared error from the L4F regression") +
ggtitle("RMSE scatter plot of classifiers") +
guides(fill = guide_legend(reverse=FALSE))
ggplot(data=data, aes(x=RMSE_L4F, y=variable, group=variable, colour=variable)) +
geom_point(colour="#9932CC", size=2) +
#geom_smooth(method=lm) +
#geom_line(aes(x=nx, y = ny), colour = '#00BFFF', size=0.5) +
#stat_smooth(method='lm') +
scale_color_manual(values=c("#4B0082", "#FF6347")) + #, '#9ACD32', '#EE82EE')) +
#xlab("Root mean squared error from the Twitter regression") +
#ylab("Root mean squared error from the L4F regression") +
ggtitle("RMSE scatter plot of classifiers") +
guides(fill = guide_legend(reverse=FALSE))
ggplot(data=data, aes(x=RMSE_L4F, y=variable, group=variable, colour=variable)) +
geom_point(colour="#9932CC", size=2) +
#geom_smooth(method=lm) +
#geom_line(aes(x=nx, y = ny), colour = '#00BFFF', size=0.5) +
#stat_smooth(method='lm') +
scale_color_manual(values=c("#4B0082", "#FF6347")) + #, '#9ACD32', '#EE82EE')) +
#xlab("Root mean squared error from the Twitter regression") +
xlab("Root mean squared error from the L4F regression") +
ggtitle("RMSE scatter plot of classifiers")
View(df)
ggplot(data=data, aes(x=RMSE_L4F, y=value, group=variable, colour=variable)) +
geom_point(colour="#9932CC", size=2) +
#geom_smooth(method=lm) +
#geom_line(aes(x=nx, y = ny), colour = '#00BFFF', size=0.5) +
#stat_smooth(method='lm') +
scale_color_manual(values=c("#4B0082", "#FF6347")) + #, '#9ACD32', '#EE82EE')) +
#xlab("Root mean squared error from the Twitter regression") +
xlab("Root mean squared error from the L4F regression") +
ggtitle("RMSE scatter plot of classifiers")
View(df)
ggplot(data=data, aes(x=RMSE_L4f, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("Root mean squared error from the L4F regression") +
ylab("Root mean squared error from the Twitter regression") +
ggtitle("RMSE scatter plot of classifiers") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
ggplot(data=data, aes(x=RMSE_L4F, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("Root mean squared error from the L4F regression") +
ylab("Root mean squared error from the Twitter regression") +
ggtitle("RMSE scatter plot of classifiers") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
View(data)
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/plot_report.csv')
data <- data[complete.cases(data), ]
data <- do.call(data,lapply(data, function(x) replace(x, is.infinite(x),NA)))
data$RMSE.TwitterDF <- as.numeric(data$RMSE.TwitterDF)
data$RMSE.TwitterCF <- as.numeric(data$RMSE.TwitterCF)
data$RMSE_L4F <- as.numeric(data$RMSE_L4F)
max.val <- max(data$RMSE.TwitterCF)
nx = seq(1, max.val-1, by=max.val/982)
ny = seq(1, max.val-1, by=max.val/982)
drops <- c("Place")
data <- data[,!(names(data) %in% drops)]
data <- melt(data, id.vars=c("RMSE_L4F"))
View(data)
ggplot(data=data, aes(x=RMSE_L4F, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("Root mean squared error from the L4F regression") +
ylab("Root mean squared error from the Twitter regression") +
ggtitle("RMSE scatter plot of classifiers") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
ggplot(data=data, aes(x=RMSE_L4F, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("Root mean squared error from the L4F regression") +
ylab("Root mean squared error from the Twitter regressions") +
ggtitle("RMSE scatter plot of classifiers") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/london.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/for_report.csv')
data <- data[complete.cases(data), ]
data <- do.call(data,lapply(data, function(x) replace(x, is.infinite(x),NA)))
data$RMSE.TwitterDF <- as.numeric(data$RMSE.TwitterDF)
data$RMSE.TwitterCF <- as.numeric(data$RMSE.TwitterCF)
data$RMSE_L4F <- as.numeric(data$RMSE_L4F)
max.val <- max(data$RMSE.TwitterCF)
nx = seq(1, max.val-1, by=max.val/982)
ny = seq(1, max.val-1, by=max.val/982)
keeps <- c("RMSE.TwitterCF", "RMSE.TwitterDF", "RMSE_L4F")
data <- data[!(names(data) %in% keeps)]
data <- melt(data, id.vars=c("RMSE_L4F"))
View(data)
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/for_report.csv')
View(data)
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/lasso-static-and-dynamic.csv')
data <- data[complete.cases(data), ]
data <- do.call(data,lapply(data, function(x) replace(x, is.infinite(x),NA)))
data$RMSE.TwitterDF <- as.numeric(data$RMSE.TwitterDF)
data$RMSE.TwitterCF <- as.numeric(data$RMSE.TwitterCF)
data$RMSE_L4F <- as.numeric(data$RMSE_L4F)
max.val <- max(data$RMSE.TwitterCF)
nx = seq(1, max.val-1, by=max.val/982)
ny = seq(1, max.val-1, by=max.val/982)
keeps <- c("RMSE.TwitterCF", "RMSE.TwitterDF", "RMSE_L4F")
data <- data[!(names(data) %in% keeps)]
data <- melt(data, id.vars=c("RMSE_L4F"))
View(data)
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/lasso-static-and-dynamic.csv')
data <- data[complete.cases(data), ]
data <- do.call(data,lapply(data, function(x) replace(x, is.infinite(x),NA)))
data$RMSE.TwitterDF <- as.numeric(data$RMSE.TwitterDF)
data$RMSE.TwitterCF <- as.numeric(data$RMSE.TwitterCF)
data$RMSE_L4F <- as.numeric(data$RMSE_L4F)
max.val <- max(data$RMSE.TwitterCF)
nx = seq(1, max.val-1, by=max.val/982)
ny = seq(1, max.val-1, by=max.val/982)
keeps <- c("RMSE.TwitterCF", "RMSE.TwitterDF", "RMSE_L4F")
data <- data[(names(data) %in% keeps)]
data <- melt(data, id.vars=c("RMSE_L4F"))
View(data)
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/lasso-static-and-dynamic.csv')
data <- data[complete.cases(data), ]
data <- do.call(data,lapply(data, function(x) replace(x, is.infinite(x),NA)))
data$RMSE.TwitterDF <- as.numeric(data$RMSE.TwitterDF)
data$RMSE.TwitterCF <- as.numeric(data$RMSE.TwitterCF)
data$RMSE_L4F <- as.numeric(data$RMSE_L4F)
max.val <- max(data$RMSE.TwitterCF)
nx = seq(1, max.val-1, by=max.val/982)
ny = seq(1, max.val-1, by=max.val/982)
keeps <- c("RMSE.TwitterCf", "RMSE.TwitterDF", "RMSE_L4F")
data <- data[(names(data) %in% keeps)]
data <- melt(data, id.vars=c("RMSE_L4F"))
ggplot(data=data, aes(x=RMSE_L4F, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("Root mean squared error from the L4F regression") +
ylab("Root mean squared error from the Twitter regressions") +
ggtitle("RMSE scatter plot of classifiers") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/london.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/amsterda.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/amsterdam.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/austria.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/lasso-static-and-dynamic.csv')
data <- data[complete.cases(data), ]
data <- do.call(data,lapply(data, function(x) replace(x, is.infinite(x),NA)))
data$RMSE.TwitterDF <- as.numeric(data$RMSE.TwitterDF)
data$RMSE.TwitterCF <- as.numeric(data$RMSE.TwitterCF)
data$RMSE_L4F <- as.numeric(data$RMSE_L4F)
max.val <- max(data$RMSE.TwitterCF)
nx = seq(1, max.val-1, by=max.val/982)
ny = seq(1, max.val-1, by=max.val/982)
keeps <- c("RMSE.TwitterCf", "RMSE.TwitterDF", "RMSE_L4F")
data <- data[(names(data) %in% keeps)]
data <- melt(data, id.vars=c("RMSE_L4F"))
ggplot(data=data, aes(x=RMSE_L4F, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("Root mean squared error from the L4F regression") +
ylab("Root mean squared error from the Twitter regressions") +
ggtitle("RMSE scatter plot of classifiers") +
stat_smooth(method='lm')
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/lasso-static-and-dynamic.csv')
data <- data[complete.cases(data), ]
data <- do.call(data,lapply(data, function(x) replace(x, is.infinite(x),NA)))
data$RMSE.TwitterDF <- as.numeric(data$RMSE.TwitterDF)
data$RMSE.TwitterCF <- as.numeric(data$RMSE.TwitterCF)
data$RMSE_L4F <- as.numeric(data$RMSE_L4F)
max.val <- max(data$RMSE.TwitterCF)
nx = seq(1, max.val-1, by=max.val/982)
ny = seq(1, max.val-1, by=max.val/982)
keeps <- c("RMSE.TwitterCF", "RMSE.TwitterDF", "RMSE_L4F")
data <- data[(names(data) %in% keeps)]
data <- melt(data, id.vars=c("RMSE_L4F"))
ggplot(data=data, aes(x=RMSE_L4F, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("Root mean squared error from the L4F regression") +
ylab("Root mean squared error from the Twitter regressions") +
ggtitle("RMSE scatter plot of classifiers") +
stat_smooth(method='lm')
library(ggplot2)
library(reshape)
#RMSE Scatter
data <- read.csv('../results/lasso-static-and-dynamic.csv')
data <- data[complete.cases(data), ]
data <- do.call(data,lapply(data, function(x) replace(x, is.infinite(x),NA)))
data$RMSE.TwitterDF <- as.numeric(data$RMSE.TwitterDF)
data$RMSE.TwitterCF <- as.numeric(data$RMSE.TwitterCF)
data$RMSE_L4F <- as.numeric(data$RMSE_L4F)
max.val <- max(data$RMSE.TwitterCF)
nx = seq(1, max.val-1, by=max.val/982)
ny = seq(1, max.val-1, by=max.val/982)
keeps <- c("RMSE.TwitterCF", "RMSE.TwitterDF", "RMSE_L4F")
data <- data[(names(data) %in% keeps)]
data <- melt(data, id.vars=c("RMSE_L4F"))
ggplot(data=data, aes(x=RMSE_L4F, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("Root mean squared error from the L4F regression") +
ylab("Root mean squared error from the Twitter regressions") +
ggtitle("RMSE scatter plot of classifiers") +
stat_smooth(method='lm')
df <- read.csv('../tidydata/predictions/iceland.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/palma.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/italy.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/lanzarote.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
df <- read.csv('../tidydata/predictions/london.csv')
#df$TwitterCF <- df$TwitterCF/max(df$TwitterCF)
#df$TwitterDF <- df$TwitterDF/max(df$TwitterDF)
#df$L4F <- df$L4F/max(df$L4F)
#df$Actual <- df$Actual/max(df$Actual)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
destinations = c('alicante',  'amsterdam',  'athens',  'australia',  'austria',  'bangkok',  'barcelona',  'berlin',  'china',  'cuba',  'cyprus',  'dubai',  'dublin',  'faro',  'france',  'geneva',  'germany',  'greece',  'havana',  'ibiza',  'iceland',  'india',  'istanbul',  'italy',  'lanzarote',  'London',  'madrid',  'malaga',  'manchester',  'milan',  'morocco',  'Moscow',  'munich',  'netherlands',  'palma',  'paris',  'portugal',  'rome',  'russia',  'spain',  'switzerland',  'tenerife',  'thailand',  'thessaloniki',  'turkey',  'vietnam')
fix(destinations)
paste('../tidydata/predictions/', 'derp')
paste('../tidydata/predictions/', 'derp')
help(paste)
paste('../tidydata/predictions/', 'derp', sep='')
for (i in destinatios){
file = paste('../tidydata/predictions/', i, sep='')
file = paste(file, '.csv',sep='')
file
}
destinations = c('alicante',  'amsterdam',  'athens',  'australia',  'austria',  'bangkok',  'barcelona',  'berlin',  'china',  'cuba',  'cyprus',  'dubai',  'dublin',  'faro',  'france',  'geneva',  'germany',  'greece',  'havana',  'ibiza',  'iceland',  'india',  'istanbul',  'italy',  'lanzarote',  'London',  'madrid',  'malaga',  'manchester',  'milan',  'morocco',  'Moscow',  'munich',  'netherlands',  'palma',  'paris',  'portugal',  'rome',  'russia',  'spain',  'switzerland',  'tenerife',  'thailand',  'thessaloniki',  'turkey',  'vietnam')
for (i in destinations){
file = paste('../tidydata/predictions/', i, sep='')
file = paste(file, '.csv',sep='')
file
}
destinations = c('alicante',  'amsterdam',  'athens',  'australia',  'austria',  'bangkok',  'barcelona',  'berlin',  'china',  'cuba',  'cyprus',  'dubai',  'dublin',  'faro',  'france',  'geneva',  'germany',  'greece',  'havana',  'ibiza',  'iceland',  'india',  'istanbul',  'italy',  'lanzarote',  'London',  'madrid',  'malaga',  'manchester',  'milan',  'morocco',  'Moscow',  'munich',  'netherlands',  'palma',  'paris',  'portugal',  'rome',  'russia',  'spain',  'switzerland',  'tenerife',  'thailand',  'thessaloniki',  'turkey',  'vietnam')
for (i in destinations){
file = paste('../tidydata/predictions/', i, sep='')
file = paste(file, '.csv',sep='')
df <- read.csv(file)
df <- melt(df, id.vars=c("Actual"))
ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
}
destinations = c('alicante',  'amsterdam',  'athens',  'australia',  'austria',  'bangkok',  'barcelona',  'berlin',  'china',  'cuba',  'cyprus',  'dubai',  'dublin',  'faro',  'france',  'geneva',  'germany',  'greece',  'havana',  'ibiza',  'iceland',  'india',  'istanbul',  'italy',  'lanzarote',  'London',  'madrid',  'malaga',  'manchester',  'milan',  'morocco',  'Moscow',  'munich',  'netherlands',  'palma',  'paris',  'portugal',  'rome',  'russia',  'spain',  'switzerland',  'tenerife',  'thailand',  'thessaloniki',  'turkey',  'vietnam')
for (i in destinations){
file = paste('../tidydata/predictions/', i, sep='')
file = paste(file, '.csv',sep='')
df <- read.csv(file)
df <- melt(df, id.vars=c("Actual"))
ggobj = ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
print(ggobj)
ggsave(sprintf("write-up/plots/%s.pdf", i))
}
destinations = c('alicante',  'amsterdam',  'athens',  'australia',  'austria',  'bangkok',  'barcelona',  'berlin',  'china',  'cuba',  'cyprus',  'dubai',  'dublin',  'faro',  'france',  'geneva',  'germany',  'greece',  'havana',  'ibiza',  'iceland',  'india',  'istanbul',  'italy',  'lanzarote',  'London',  'madrid',  'malaga',  'manchester',  'milan',  'morocco',  'Moscow',  'munich',  'netherlands',  'palma',  'paris',  'portugal',  'rome',  'russia',  'spain',  'switzerland',  'tenerife',  'thailand',  'thessaloniki',  'turkey',  'vietnam')
for (i in destinations){
file = paste('../tidydata/predictions/', i, sep='')
file = paste(file, '.csv',sep='')
df <- read.csv(file)
df <- melt(df, id.vars=c("Actual"))
ggobj = ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
print(ggobj)
ggsave(sprintf("../../write-up/plots/%s.pdf", i))
}
i = 'alicante'
file = paste('../tidydata/predictions/', i, sep='')
file = paste(file, '.csv',sep='')
df <- read.csv(file)
df <- melt(df, id.vars=c("Actual"))
ggobj = ggplot(data=df, aes(x=Actual, y=value, group=variable, colour=variable)) +
geom_point(size=3) + facet_grid(. ~ variable) +
scale_color_manual(values=c("#4B0082", "#FF6347", '#9ACD32', '#EE82EE')) +
xlab("True searches") + ylab("Predicted searches") +
ggtitle("Scatter plot of all the different predictions against the actual values") +
stat_smooth(method='lm') +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank()
)
print(ggobj)
ggsave(sprintf("../../write-up/plots/%s.pdf", i))
